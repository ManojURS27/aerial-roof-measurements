<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aerial Report Service</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            color: #1a202c;
        }
        /* Ensures the main app container fills the viewport */
        #app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        #map-container {
            flex-grow: 1; 
            min-height: 300px;
        }
        #map {
            height: 100%;
        }
        /* Custom styles for the message modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(5px);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 24px;
            border-radius: 8px;
            max-width: 400px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            animation: fadeIn 0.3s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* --- Map Control Styles for Aesthetic Consistency --- */
        .map-control {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.06);
            margin: 10px;
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            max-width: 90vw;
        }
        .map-control input[type="text"] {
            border: 1px solid #d1d5db; 
            border-radius: 6px;
            padding: 8px 12px;
            font-size: 16px;
            line-height: 1.5;
            width: 100%;
        }
        .map-control-row {
            display: flex;
            gap: 8px;
            width: 100%;
        }
        .map-control-row input[type="button"], .map-control-row button {
            flex-grow: 1;
            cursor: pointer;
            transition: background-color 0.2s, box-shadow 0.2s;
            padding: 8px 12px;
            border-radius: 6px;
            font-weight: 500;
            text-align: center;
            border: none;
        }
        .button-primary {
            background-color: #4f46e5; /* Indigo 600 */
            color: white;
        }
        .button-primary:hover:not(:disabled) {
            background-color: #4338ca; /* Indigo 700 */
        }
        .button-primary:disabled {
            background-color: #a5b4fc; /* Indigo 300 */
            cursor: not-allowed;
        }
        .button-secondary {
            background-color: white;
            color: #4f46e5;
            border: 1px solid #4f46e5;
        }
        .button-secondary:hover:not(:disabled) {
            background-color: #eef2ff; /* Indigo 50 */
        }
        .status-pending {
            color: #f59e0b; /* Amber 500 */
        }
        .status-complete {
            color: #10b981; /* Emerald 500 */
        }
    </style>
</head>
<body>
    <div id="app-container">
        <header class="bg-indigo-700 text-white p-4 shadow-lg flex justify-between items-center">
            <h1 class="text-2xl font-bold">Aerial Report Service</h1>
            <div id="user-info" class="text-sm">Loading User...</div>
        </header>

        <!-- Main Content Area -->
        <div class="flex flex-col lg:flex-row flex-grow overflow-hidden">
            
            <!-- Left Panel: Map and Location Finder (New) -->
            <div class="lg:w-2/3 flex flex-col bg-gray-100" id="map-container">
                <div id="map"></div>
                <section id="order-process-controls" class="bg-white p-6 shadow-2xl border-t border-gray-200 lg:h-auto">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Location Confirmation</h2>

                    <!-- Location Output -->
                    <div class="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-4">
                        <div class="output-field">
                            <span class="font-bold text-gray-700">Address:</span>
                            <span id="geocoded-address" class="font-medium text-indigo-600">No location selected</span>
                        </div>
                        <div class="output-field text-sm text-gray-500">
                            <span class="font-bold">Coordinates (Lat, Lng):</span>
                            <span id="geocoded-latlng">N/A</span>
                        </div>
                    </div>

                    <!-- Order Form / Button -->
                    <form id="report-form" class="space-y-4">
                        <div>
                            <label for="order-type" class="block text-sm font-medium text-gray-700">Report Type</label>
                            <select id="order-type" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="Standard">Standard Roof Report (24hr)</option>
                                <option value="Priority">Priority Roof Report (4hr)</option>
                                <option value="Full">Full Property Report (48hr)</option>
                            </select>
                        </div>
                        <button type="submit" id="place-order-button" class="w-full button-primary py-3 text-lg font-bold" disabled>
                            Place Order
                        </button>
                    </form>
                </section>
            </div>

            <!-- Right Panel: Reports List (Existing) -->
            <div class="lg:w-1/3 p-6 overflow-y-auto bg-gray-50 border-l border-gray-200">
                <h2 class="text-xl font-semibold text-gray-800 mb-4">Submitted Reports</h2>
                <div id="reports-list" class="space-y-4">
                    <!-- Reports will be loaded here by Firebase listener -->
                    <p class="text-gray-500">Loading reports...</p>
                </div>
            </div>

        </div>
    </div>
    
    <!-- Custom Modal for Messages (Success/Error/Confirmation) -->
    <div id="message-modal" class="modal">
        <div class="modal-content">
            <h3 id="modal-title" class="text-2xl font-bold mb-3"></h3>
            <p id="modal-message" class="text-gray-700 mb-6"></p>
            <div id="modal-actions" class="flex justify-center space-x-4">
                <button id="modal-close-button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-6 rounded-full shadow-lg transition duration-200">
                    OK
                </button>
            </div>
        </div>
    </div>

    <!-- Google Maps API Script -->
    <!-- REMINDER: REPLACE 'INSERT_YOUR_API_KEY' with your actual Google Maps API key -->
    <script
        src="https://maps.googleapis.com/maps/api/js?key=INSERT_YOUR_API_KEY&callback=initializeFirebase&v=weekly&solution_channel=GMP_CCS_geocodingservice_v2"
        defer
    ></script>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, addDoc, onSnapshot, collection, query, serverTimestamp, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Set Firebase logging level for debugging
        setLogLevel('Debug');

        // --- GLOBAL STATE VARIABLES ---
        let app, db, auth, userId;
        let map, marker, geocoder;
        let currentAddress = null;
        let currentLatLng = null;
        let pendingAction = null; // Used for confirmation actions

        // --- FIREBASE UTILITIES ---

        /**
         * Initializes Firebase app, services, and handles authentication.
         * Called by the Google Maps callback.
         */
        window.initializeFirebase = async function() {
            try {
                // Access global configuration variables
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

                // Initialize services
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                
                // Handle Authentication
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Auth failed, signing in anonymously:", error);
                    await signInAnonymously(auth);
                }

                // Set up Auth State Listener
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        document.getElementById('user-info').innerHTML = `User ID: <span class="font-mono text-gray-300">${userId}</span>`;
                        // Continue setup only after authentication is confirmed
                        initMap();
                        setupReportListener();
                    } else {
                        userId = null;
                        document.getElementById('user-info').innerText = 'Unauthenticated';
                    }
                });

            } catch (error) {
                console.error("FATAL: Firebase Initialization failed:", error);
                showModal("Setup Error", "Failed to initialize the application. Check console for details.", true);
            }
        }


        // --- UI & MODAL UTILITIES ---

        const modal = document.getElementById('message-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalMessage = document.getElementById('modal-message');
        const modalActions = document.getElementById('modal-actions');
        const modalCloseButton = document.getElementById('modal-close-button');

        // Event listener for the default OK/Close button
        modalCloseButton.addEventListener('click', () => modal.style.display = 'none');

        /**
         * Displays a custom modal message, with optional confirmation buttons.
         * @param {string} title - The title of the modal.
         * @param {string} message - The main message content.
         * @param {boolean} isError - If true, styles the modal as an error.
         * @param {function | null} onConfirm - Function to run on confirmation click. If provided, confirmation buttons are shown.
         */
        function showModal(title, message, isError = false, onConfirm = null) {
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            
            // Set error/success color
            if (isError) {
                modalTitle.classList.remove('text-green-600');
                modalTitle.classList.add('text-red-600');
            } else {
                modalTitle.classList.remove('text-red-600');
                modalTitle.classList.add('text-green-600');
            }

            // Clear previous actions
            modalActions.innerHTML = '';

            if (onConfirm) {
                // Show confirmation buttons
                const confirmButton = document.createElement('button');
                confirmButton.textContent = 'Confirm';
                confirmButton.classList.add('bg-red-600', 'hover:bg-red-700', 'text-white', 'font-semibold', 'py-2', 'px-6', 'rounded-full', 'shadow-lg', 'transition', 'duration-200');
                confirmButton.onclick = () => {
                    modal.style.display = 'none';
                    onConfirm();
                };

                const cancelButton = document.createElement('button');
                cancelButton.textContent = 'Cancel';
                cancelButton.classList.add('bg-gray-300', 'hover:bg-gray-400', 'text-gray-800', 'font-semibold', 'py-2', 'px-6', 'rounded-full', 'shadow-lg', 'transition', 'duration-200');
                cancelButton.onclick = () => modal.style.display = 'none';

                modalActions.appendChild(cancelButton);
                modalActions.appendChild(confirmButton);

            } else {
                // Show default OK button
                modalActions.appendChild(modalCloseButton);
                modalCloseButton.classList.remove('hidden');
            }

            modal.style.display = 'flex';
        }

        // --- MAP AND GEOCODING LOGIC (Unchanged) ---

        /**
         * Initializes the map, geocoder, and UI controls.
         */
        function initMap() {
            // Initialize the map
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: { lat: 34.0522, lng: -118.2437 }, // Default to Los Angeles
                mapTypeControl: false,
            });
            geocoder = new google.maps.Geocoder();

            // Get form elements
            const placeOrderButton = document.getElementById("place-order-button");
            const addressOutput = document.getElementById("geocoded-address");
            const latLngOutput = document.getElementById("geocoded-latlng");

            // Create dynamic UI elements for address input
            const inputText = document.createElement("input");
            inputText.type = "text";
            inputText.placeholder = "Enter property address or ZIP code";

            const submitButton = document.createElement("input");
            submitButton.type = "button";
            submitButton.value = "Find Location";
            submitButton.classList.add("button", "button-primary");

            const clearButton = document.createElement("input");
            clearButton.type = "button";
            clearButton.value = "Clear";
            clearButton.classList.add("button", "button-secondary");

            // Create the control container
            const controlContainer = document.createElement("div");
            controlContainer.classList.add("map-control");

            const instructionsElement = document.createElement("p");
            instructionsElement.classList.add("text-sm", "text-gray-600");
            instructionsElement.innerHTML =
                "**Instructions**: Enter an address or **click on the map** to select a location.";
            
            const inputRow = document.createElement("div");
            inputRow.classList.add("map-control-row");
            inputRow.appendChild(inputText);
            
            const buttonRow = document.createElement("div");
            buttonRow.classList.add("map-control-row");
            buttonRow.appendChild(submitButton);
            buttonRow.appendChild(clearButton);

            controlContainer.appendChild(instructionsElement);
            controlContainer.appendChild(inputRow);
            controlContainer.appendChild(buttonRow);
            
            // Add controls to the map UI
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlContainer);
            
            // Initialize marker
            marker = new google.maps.Marker({ map });

            // Add event listeners
            map.addListener("click", (e) => geocode({ location: e.latLng }));
            submitButton.addEventListener("click", () => geocode({ address: inputText.value }));
            clearButton.addEventListener("click", () => clear());

            // Clear initial state
            clear();
        }

        /**
         * Clears the map marker and output data.
         */
        function clear() {
            if (marker) marker.setMap(null);
            updateOutput(null, null); // Clear output fields
        }

        /**
         * Updates the UI output with the found address and coordinates.
         * @param {string} address - The formatted address string.
         * @param {google.maps.LatLng} latLng - The latitude and longitude object.
         */
        function updateOutput(address, latLng) {
            currentAddress = address;
            currentLatLng = latLng;
            
            const addressOutput = document.getElementById("geocoded-address");
            const latLngOutput = document.getElementById("geocoded-latlng");
            const placeOrderButton = document.getElementById("place-order-button");

            addressOutput.innerText = address || "No location selected";
            latLngOutput.innerText = latLng ? `${latLng.lat().toFixed(6)}, ${latLng.lng().toFixed(6)}` : "N/A";
            
            // Enable Place Order button only if we have a valid location
            placeOrderButton.disabled = !address;
        }

        /**
         * Performs geocoding or reverse geocoding.
         * @param {object} request - The Geocoder request object (address or location).
         */
        function geocode(request) {
            clear();
            geocoder
                .geocode(request)
                .then((result) => {
                    const { results } = result;

                    if (results.length > 0) {
                        const location = results[0].geometry.location;
                        const formattedAddress = results[0].formatted_address;

                        map.setCenter(location);
                        marker.setPosition(location);
                        marker.setMap(map);
                        
                        // Update the visible output
                        updateOutput(formattedAddress, location);
                    } else {
                        showModal("Location Error", "No results found for the entered location.", true);
                    }
                    return results;
                })
                .catch((e) => {
                    showModal("Geocoding Failed", "Geocode service error: " + e, true);
                });
        }


        // --- FIRESTORE OPERATIONS ---

        document.getElementById('report-form').addEventListener('submit', handlePlaceOrder);
        
        // Helper function to get the document reference path
        function getReportDocRef(reportId) {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const collectionPath = `/artifacts/${appId}/users/${userId}/reports`;
            return doc(db, collectionPath, reportId);
        }

        /**
         * Saves the order data to Firestore.
         */
        async function handlePlaceOrder(event) {
            event.preventDefault();
            
            if (!currentAddress || !currentLatLng) {
                showModal("Order Error", "Please select or search for a valid location first.", true);
                return;
            }

            const orderType = document.getElementById('order-type').value;

            const orderData = {
                userId: userId, // Current user ID
                orderType: orderType,
                address: currentAddress,
                coordinates: `${currentLatLng.lat().toFixed(6)}, ${currentLatLng.lng().toFixed(6)}`,
                status: 'Pending',
                createdAt: serverTimestamp() 
            };
            
            try {
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const collectionPath = `/artifacts/${appId}/users/${userId}/reports`;
                
                await addDoc(collection(db, collectionPath), orderData);
                
                showModal("Order Success", `The ${orderType} report for ${currentAddress} has been successfully submitted!`, false);
                clear(); 

            } catch (error) {
                console.error("Error submitting order:", error);
                showModal("Submission Failed", "There was an error saving your order. Check console for details.", true);
            }
        }
        
        /**
         * Marks a report as 'Complete' in Firestore.
         * @param {string} reportId - The ID of the document to update.
         */
        window.markAsComplete = async function(reportId) {
            try {
                await updateDoc(getReportDocRef(reportId), {
                    status: 'Complete'
                });
                showModal("Report Updated", "Report status changed to Complete.", false);
            } catch (error) {
                console.error("Error updating report:", error);
                showModal("Update Failed", "Could not mark report as complete.", true);
            }
        }

        /**
         * Deletes a report from Firestore after user confirmation.
         * @param {string} reportId - The ID of the document to delete.
         */
        window.confirmDelete = function(reportId) {
            showModal(
                "Confirm Deletion",
                "Are you sure you want to delete this report? This action cannot be undone.",
                true, // Use error styling for caution
                () => deleteReport(reportId) // Callback function on confirmation
            );
        }

        /**
         * Deletes a report from Firestore.
         * @param {string} reportId - The ID of the document to delete.
         */
        async function deleteReport(reportId) {
            try {
                await deleteDoc(getReportDocRef(reportId));
                showModal("Report Deleted", "The report was successfully removed.", false);
            } catch (error) {
                console.error("Error deleting report:", error);
                showModal("Deletion Failed", "Could not delete the report.", true);
            }
        }

        /**
         * Sets up a real-time listener for reports submitted by the current user.
         */
        function setupReportListener() {
            if (!db || !userId) {
                console.warn("Database or User ID not ready for listener.");
                return;
            }

            const reportsList = document.getElementById('reports-list');
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const collectionPath = `/artifacts/${appId}/users/${userId}/reports`;

            const q = collection(db, collectionPath);

            onSnapshot(q, (snapshot) => {
                let reportsHtml = '';
                if (snapshot.empty) {
                    reportsHtml = '<p class="text-gray-500">No reports submitted yet.</p>';
                } else {
                    snapshot.forEach(doc => {
                        const report = doc.data();
                        const reportId = doc.id; // Get the document ID for actions
                        const timestamp = report.createdAt ? new Date(report.createdAt.seconds * 1000).toLocaleString() : 'N/A';
                        const statusClass = report.status === 'Complete' ? 'status-complete' : 'status-pending';

                        reportsHtml += `
                            <div class="p-4 bg-white rounded-lg shadow-md border-l-4 ${report.status === 'Complete' ? 'border-green-500' : 'border-indigo-500'}">
                                <h4 class="font-bold text-lg text-indigo-700">${report.orderType} Report</h4>
                                <p class="text-sm text-gray-600 truncate">Address: ${report.address}</p>
                                <p class="text-sm text-gray-600">Coords: ${report.coordinates}</p>
                                <div class="mt-2 flex justify-between items-center">
                                    <p class="text-xs text-gray-400">Status: <span class="font-semibold ${statusClass}">${report.status}</span></p>
                                    <p class="text-xs text-gray-400">Submitted on: ${timestamp}</p>
                                </div>
                                
                                <div class="mt-4 flex space-x-2">
                                    ${report.status !== 'Complete' ? 
                                        `<button onclick="markAsComplete('${reportId}')" class="text-xs bg-green-500 hover:bg-green-600 text-white py-1 px-3 rounded-full transition duration-150">
                                            Mark as Complete
                                        </button>` :
                                        `<button disabled class="text-xs bg-gray-300 text-gray-700 py-1 px-3 rounded-full cursor-not-allowed">
                                            Completed
                                        </button>`
                                    }
                                    <button onclick="confirmDelete('${reportId}')" class="text-xs bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded-full transition duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        `;
                    });
                }
                reportsList.innerHTML = reportsHtml;
            }, (error) => {
                console.error("Error listening to reports:", error);
                reportsList.innerHTML = `<p class="text-red-500">Failed to load reports.</p>`;
            });
        }
    </script>
</body>
</html>
